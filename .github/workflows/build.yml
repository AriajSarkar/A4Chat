name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.check-release.outputs.should_build }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get package.json version
        id: get-version
        run: |
          if [ -f "package.json" ]; then
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "Error: package.json not found"
            exit 1
          fi

      - name: Check if version exists in releases
        id: check-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          echo "Checking version v$VERSION"
          
          if curl -s -f -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION"; then
            echo "Version v$VERSION already exists, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Version v$VERSION not found, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            .webpack
            out
            dist
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json', 'forge.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-build-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run make
        
      - name: Debug output location (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Listing all files in out directory:"
          Get-ChildItem -Path "out" -Recurse -File | Select-Object FullName

      - name: Debug output location (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Listing all files in out directory:"
          find out -type f
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            ${{ matrix.os == 'windows-latest' && 'out/make/squirrel.windows/x64' || 'out/make/deb/x64' }}
            ${{ matrix.os == 'ubuntu-latest' && 'out/make/rpm/x64' || '' }}
          if-no-files-found: error
          retention-days: 1

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should_build == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog and summary
        run: |
          # Get the last tag and commits
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo HEAD)
          COMMITS=$(git log --pretty=format:"%h %s" $LAST_TAG..HEAD)
          
          # Generate full changelog
          echo "## [v${{ needs.check-version.outputs.version }}] - $(date +'%Y-%m-%d')" > temp_changelog.md
          echo "" >> temp_changelog.md
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> temp_changelog.md
          echo "" >> temp_changelog.md
          echo "" >> temp_changelog.md
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> temp_changelog.md
          fi
          mv temp_changelog.md CHANGELOG.md
          
          # Validate we have commits to analyze
          if [ -z "$COMMITS" ]; then
            echo "Warning: No commits found between last tag and HEAD"
            echo "## No new commits found since last release" > RELEASE_NOTES.md
            exit 0
          fi
          
          # Generate AI summary using Gemini 2.0 Flash
          SUMMARY=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "contents": [
              {
                "role": "user",
                "parts": [
                  {
                    "text": "Analyze these git commits and provide a clear, concise summary of changes. Focus on features, improvements, and fixes. Format as bullet points categorized by type (Features, Bug Fixes, etc):\n\n'"$COMMITS"'"
                  }
                ]
              }
            ],
            "generationConfig": {
              "temperature": 0.7,
              "topK": 40,
              "topP": 0.95,
              "maxOutputTokens": 2048
            }
          }')
          
          # Debug output (redacted in logs)
          echo "API Response debug (first 100 chars): ${SUMMARY:0:100}"
          
          # Check for API errors - improved error handling
          if ! echo "$SUMMARY" | jq -e . > /dev/null 2>&1; then
            echo "Error: Invalid JSON response from API"
            echo "## Release Summary (Autogeneration Failed)" > RELEASE_NOTES.md
            echo "Using commit list as fallback summary:" >> RELEASE_NOTES.md
            echo "$COMMITS" >> RELEASE_NOTES.md
          elif ! echo "$SUMMARY" | jq -e '.candidates[0].content.parts[0].text' > /dev/null 2>&1; then
            echo "Error: Expected response fields missing in API response"
            echo "Full response: $SUMMARY"
            echo "## Release Summary (Autogeneration Failed)" > RELEASE_NOTES.md
            echo "Using commit list as fallback summary:" >> RELEASE_NOTES.md
            echo "$COMMITS" >> RELEASE_NOTES.md
          else
            # Extract and format summary
            echo "## Release Summary for v${{ needs.check-version.outputs.version }}" > RELEASE_NOTES.md
            echo "$(date +'%Y-%m-%d')" >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "$SUMMARY" | jq -r '.candidates[0].content.parts[0].text' >> RELEASE_NOTES.md
          fi

      - name: Commit documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md RELEASE_NOTES.md
          git commit -m "docs(release): update documentation for v${{ needs.check-version.outputs.version }}" || echo "No changes to commit"
          git pull --rebase origin main
          git push || git push --force-with-lease
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          files: |
            release-artifacts/**/*.exe
            release-artifacts/**/RELEASES
            release-artifacts/**/*.nupkg
            release-artifacts/**/*.deb
            release-artifacts/**/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
