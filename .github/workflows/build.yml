name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: ''

jobs:
  check-doc-changes:
    uses: ./.github/workflows/doc-changes.yml

  version-update:
    needs: check-doc-changes
    if: ${{ github.event_name != 'workflow_dispatch' && needs.check-doc-changes.outputs.only_docs == 'false' }}
    uses: ./.github/workflows/version-update.yml
    secrets: inherit

  check-release:
    needs: [version-update]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check.outputs.exists }}
      version: ${{ steps.version.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - name: Get version
        id: version
        run: |
          if [ -f "package.json" ]; then
            echo "value=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "Error: package.json not found"
            exit 1
          fi
      - name: Check if release exists
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          STATUS=$(curl -H "Authorization: token $GITHUB_TOKEN" \
                       -s -o /dev/null -w "%{http_code}" \
                       https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.version.outputs.value }})
          if [ "$STATUS" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-windows:
    needs: check-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            .webpack
            out
            dist
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json', 'forge.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-build-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run make
        
      - name: Debug output location
        shell: pwsh
        run: |
          Write-Host "Listing all files in out directory:"
          Get-ChildItem -Path "out" -Recurse -File | Select-Object FullName
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: out/make/squirrel.windows/x64
          if-no-files-found: error
          retention-days: 1

  build-linux:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            .webpack
            out
            dist
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json', 'forge.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-build-
            
      - name: Install dependencies
        run: |
          npm ci
          if [ $? -ne 0 ]; then
            echo "npm ci failed"
            exit 1
          fi
        
      - name: Build application
        run: |
          npm run make
          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi
        
      - name: Debug output location
        run: |
          echo "Listing all files in out directory:"
          find out -type f
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            out/make/deb/x64
            out/make/rpm/x64
          if-no-files-found: error
          retention-days: 1

  update-changelog:
    needs: [check-release, build-linux]
    if: needs.check-release.outputs.exists == 'false' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get previous tag
        id: previoustag
        run: |
          echo "tag=$(git describe --tags --abbrev=0 || echo 'v0.0.0')" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        run: |
          echo "## [v${{ needs.check-release.outputs.version }}] - $(date +'%Y-%m-%d')" > temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Get commits since last tag
          git log --pretty=format:"### %s%n%b" $(git describe --tags --abbrev=0)..HEAD | while read -r line; do
            if [[ $line == "### "* ]]; then
              # Format commit headlines
              echo "- ${line#### }" >> temp_changelog.md
            elif [[ -n "$line" ]]; then
              # Format commit body with indent
              echo "  ${line}" >> temp_changelog.md
            fi
          done
          
          echo "" >> temp_changelog.md
          
          if [ -f CHANGELOG.md ]; then
            tail -n +1 CHANGELOG.md >> temp_changelog.md
          fi
          
          mv temp_changelog.md CHANGELOG.md
          
      - name: Commit changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v${{ needs.check-release.outputs.version }}" || echo "No changes to commit"
          git push

  create-release:
    needs: [check-release, build-linux, update-changelog]
    runs-on: ubuntu-latest
    if: needs.check-release.outputs.exists == 'false' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: Debug artifacts
        run: |
          echo "Downloaded artifacts:"
          find release-artifacts -type f
          echo "File permissions:"
          ls -la release-artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-release.outputs.version }}
          name: Release v${{ needs.check-release.outputs.version }}
          draft: false
          prerelease: false
          files: |
            release-artifacts/**/*.exe
            release-artifacts/**/RELEASES
            release-artifacts/**/*.nupkg
            release-artifacts/**/*.deb
            release-artifacts/**/*.rpm
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: [create-release]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Delete version update branch
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BRANCH="version-update/$VERSION"
          if git ls-remote --heads origin $BRANCH | grep -q $BRANCH; then
            git push origin --delete $BRANCH
            echo "Deleted branch $BRANCH"
          else
            echo "Branch $BRANCH not found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
