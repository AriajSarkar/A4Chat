name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.check-release.outputs.should_build }}
      should_update_changelog: ${{ steps.check-release.outputs.should_update_changelog }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get package.json version
        id: get-version
        run: |
          if [ -f "package.json" ]; then
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "Error: package.json not found"
            exit 1
          fi

      - name: Check if version exists in releases
        id: check-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          echo "Checking version v$VERSION"
          
          if curl -s -f -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION"; then
            echo "Version v$VERSION already exists, will update changelog"
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "should_update_changelog=true" >> $GITHUB_OUTPUT
          else
            echo "Version v$VERSION not found, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "should_update_changelog=false" >> $GITHUB_OUTPUT
          fi

  update-changelog:
    needs: check-version
    if: needs.check-version.outputs.should_update_changelog == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest commit messages
        id: get-commits
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          START_LINE=$(grep -n "## \[v$VERSION\]" CHANGELOG.md | cut -d: -f1 | head -n 1)
          END_LINE=$(grep -n "## \[" CHANGELOG.md | awk -v start="$START_LINE" '$1 > start { print $1; exit }' FS=":")

          if [ -z "$START_LINE" ]; then
            echo "No existing changelog section found for v$VERSION. Creating a new one."
            START_LINE=$(wc -l < CHANGELOG.md)
            END_LINE=$((START_LINE + 1000))
          fi

          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD)..HEAD > commit_messages.txt

      - name: Summarize commits
        id: summarize-commits
        run: |
          echo "Summarizing commits..."
          cat commit_messages.txt | awk '
          BEGIN {print "### Summary of recent changes:\n"}
          {if (++count <= 10) print "- " $0}
          END {if (count > 10) print "... and more."}' > summary.txt

      - name: Update changelog
        run: |
          VERSION=${{ needs.check-version.outputs.version }}
          START_LINE=$(grep -n "## \[v$VERSION\]" CHANGELOG.md | cut -d: -f1 | head -n 1)
          END_LINE=$(grep -n "## \[" CHANGELOG.md | awk -v start="$START_LINE" '$1 > start { print $1; exit }' FS=":")

          if [ -z "$START_LINE" ]; then
            echo "Creating a new section for v$VERSION"
            START_LINE=$(wc -l < CHANGELOG.md)
            END_LINE=$((START_LINE + 1000))
          fi

          echo "## [v$VERSION] - $(date +'%Y-%m-%d')" > temp_changelog.md
          echo "" >> temp_changelog.md
          cat summary.txt >> temp_changelog.md
          echo "" >> temp_changelog.md
          echo "" >> temp_changelog.md
          tail -n +$((END_LINE)) CHANGELOG.md >> temp_changelog.md

          mv temp_changelog.md CHANGELOG.md

      - name: Commit and push changelog update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update changelog summary for v${{ needs.check-version.outputs.version }}" || echo "No changes to commit"
          git pull --rebase origin main
          git push || git push --force-with-lease

  build:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            .webpack
            out
            dist
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json', 'forge.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-build-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run make
        
      - name: Debug output location
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Listing all files in out directory:"
          Get-ChildItem -Path "out" -Recurse -File | Select-Object FullName

      - name: Debug output location
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Listing all files in out directory:"
          find out -type f
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            ${{ matrix.os == 'windows-latest' && 'out/make/squirrel.windows/x64' || 'out/make/deb/x64' }}
            ${{ matrix.os == 'ubuntu-latest' && 'out/make/rpm/x64' || '' }}
          if-no-files-found: error
          retention-days: 1

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should_build == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          files: |
            release-artifacts/**/*.exe
            release-artifacts/**/RELEASES
            release-artifacts/**/*.nupkg
            release-artifacts/**/*.deb
            release-artifacts/**/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
