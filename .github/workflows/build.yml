name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      should_build: ${{ steps.check-release.outputs.should_build }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Get package.json version
        id: get-version
        run: |
          if [ -f "package.json" ]; then
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "Error: package.json not found"
            exit 1
          fi

      - name: Check if version exists in releases
        id: check-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          echo "Checking version v$VERSION"
          
          if curl -s -f -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION"; then
            echo "Version v$VERSION already exists, skipping build"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Version v$VERSION not found, will build"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: |
            .webpack
            out
            dist
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json', 'forge.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-build-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run make
        
      - name: Debug output location (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Listing all files in out directory:"
          Get-ChildItem -Path "out" -Recurse -File | Select-Object FullName

      - name: Debug output location (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Listing all files in out directory:"
          find out -type f
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            ${{ matrix.os == 'windows-latest' && 'out/make/squirrel.windows/x64' || 'out/make/deb/x64' }}
            ${{ matrix.os == 'ubuntu-latest' && 'out/make/rpm/x64' || '' }}
          if-no-files-found: error
          retention-days: 1

  update-changelog:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Get package.json version
        id: get-version
        run: |
          if [ -f "package.json" ]; then
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "Error: package.json not found"
            exit 1
          fi

      - name: Install required packages
        run: npm install axios

      - name: Generate changelog and summary
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Get package.json version
          VERSION=${{ steps.get-version.outputs.version }}
          echo "Using version: $VERSION"

          # Get the last tag and commits
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)
          echo "Using last tag: $LAST_TAG"
          COMMITS=$(git log --pretty=format:"%h %s" $LAST_TAG..HEAD)
          
          # No commits? Try using a fallback
          if [ -z "$COMMITS" ]; then
            echo "Warning: No commits found between $LAST_TAG and HEAD"
            echo "Using last 10 commits as fallback"
            COMMITS=$(git log --pretty=format:"%h %s" -n 10)
          fi
          
          echo "Found $(echo "$COMMITS" | wc -l) commits"
          
          # Write JavaScript code to a file
          cat > update-changelog.js << 'EOF'
          const fs = require('fs');
          const axios = require('axios');

          // Read command line arguments
          const version = process.argv[2];
          const commits = process.argv[3];
          const changelogPath = 'CHANGELOG.md';

          async function main() {
            try {
              console.log(`Calling Gemini API to summarize ${commits.split('\n').length} commits...`);
              
              // Call Gemini API using the same structure as in the tests
              const response = await axios.post(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
                {
                  system_instruction: {
                    parts: [
                      {
                        text: "You are a commit summarizer for a changelog. Your job is to analyze git commits and organize them into logical categories with clear, concise explanations. Focus on the substance of each change, not the commit format. Use descriptive bullet points that explain the actual change rather than just repeating the commit message. Group similar changes together. Include emoji category headers for better readability. Always emphasize user-facing features and important fixes."
                      }
                    ]
                  },
                  contents: [
                    {
                      role: 'user',
                      parts: [
                        {
                          text: "Analyze these git commits and provide a clear, concise summary of changes. Format as bullet points categorized by type with emojis like:\n\n### ✨ Features\n- Feature 1 description\n- Feature 2 description\n\n### ⚙ Improvements\n- Improvement 1 description\n\n### 🐛 Bug Fixes\n- Bug fix 1 description\n\n### 🧹 Chores\n- Chore 1 description\n\n### 📝 Documentation\n- Doc change 1 description\n\n### 🔀 Merges\n- Merge 1 description\n\nBe thorough and descriptive, but concise. Do not include commit hashes. Only include categories that have relevant commits:\n\n" + commits
                        }
                      ]
                    }
                  ],
                  generationConfig: {
                    temperature: 0.7,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 2048
                  }
                },
                {
                  headers: {
                    'Content-Type': 'application/json'
                  }
                }
              );

              if (!response.data.candidates || !response.data.candidates[0].content.parts) {
                throw new Error('Invalid API response structure');
              }

              const summary = response.data.candidates[0].content.parts[0].text;
              console.log('Received summary from API');
              
              // Generate new changelog section with date
              const date = new Date().toISOString().slice(0, 10);
              const newSection = `## [v${version}] - ${date}\n\n${summary}`;
              
              // Update CHANGELOG.md
              let changelog = '';
              if (fs.existsSync(changelogPath)) {
                changelog = fs.readFileSync(changelogPath, 'utf8');
              }
              
              // Find the second version header
              const lines = changelog.split('\n');
              let secondHeaderIndex = -1;
              let headerCount = 0;
              
              for (let i = 0; i < lines.length; i++) {
                if (lines[i].match(/^## \[.*\]/)) {
                  headerCount++;
                  if (headerCount === 2) {
                    secondHeaderIndex = i;
                    break;
                  }
                }
              }
              
              // Get content starting from the second header
              const remainingContent = secondHeaderIndex !== -1 
                ? lines.slice(secondHeaderIndex).join('\n')
                : '';
              
              // Create updated changelog
              const updatedChangelog = `${newSection}\n\n${remainingContent}`;
              
              // Write updated changelog
              fs.writeFileSync(changelogPath, updatedChangelog);
              console.log('CHANGELOG.md updated successfully');
              
              // Create release notes file
              fs.writeFileSync('RELEASE_NOTES.md', `## Release Summary for v${version}\n${date}\n\n${summary}`);
              console.log('RELEASE_NOTES.md created');
            } catch (error) {
              console.error('Error:', error.message);
              if (error.response) {
                console.error('API Response:', error.response.data);
              }
              process.exit(1);
            }
          }

          main();
          EOF

          # Execute the Node.js script
          node update-changelog.js "$VERSION" "$COMMITS"

      - name: Commit documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md RELEASE_NOTES.md
          git commit -m "docs(changelog): update changelog with categorized summary for v${{ steps.get-version.outputs.version }}" || echo "No changes to commit"
          git pull --no-rebase origin main
          git push || echo "Could not push changes, they may be already on remote"

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should_build == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          files: |
            release-artifacts/**/*.exe
            release-artifacts/**/RELEASES
            release-artifacts/**/*.nupkg
            release-artifacts/**/*.deb
            release-artifacts/**/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
