name: Version Update

on:
  workflow_dispatch:
  workflow_call:

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Update patch version
        id: new_version
        run: |
          NEW_VERSION=$(npm version patch --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#"v"}
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $CURRENT_BRANCH"
          
          if [ "$CURRENT_BRANCH" = "main" ]; then
            # Directly commit to main
            git add package.json
            git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
            git push origin main
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            # Handle PR updates
            git checkout -b "${{ github.head_ref }}"
            git add package.json
            git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
            git push origin HEAD:${{ github.head_ref }} --force
          else
            # Create new version branch and PR
            git checkout -b "version-update/${{ steps.new_version.outputs.version }}"
            git add package.json
            git commit -m "chore: bump version to ${{ steps.new_version.outputs.version }}"
            git push origin "version-update/${{ steps.new_version.outputs.version }}" --force
            
            gh pr create --title "chore: bump version to ${{ steps.new_version.outputs.version }}" \
                        --body "Automated version bump to ${{ steps.new_version.outputs.version }}" \
                        --base main \
                        --head "version-update/${{ steps.new_version.outputs.version }}" \
                        --label "version-bump" || true
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      new_version: ${{ steps.new_version.outputs.version }}

  trigger-build:
    needs: update-version
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Wait for branch to be available
        run: sleep 10
      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Merge to main
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Fetch all branches
          git fetch --all
          
          # Debug branch info
          echo "Available branches:"
          git branch -r
          
          VERSION_BRANCH="version-update/${{ needs.update-version.outputs.new_version }}"
          echo "Attempting to merge branch: $VERSION_BRANCH"
          
          # Check if branch exists
          if git show-ref --verify --quiet "refs/remotes/origin/$VERSION_BRANCH"; then
            git checkout main
            git merge --no-ff "origin/$VERSION_BRANCH" -m "chore: merge version update ${{ needs.update-version.outputs.new_version }}"
            git push origin main
          else
            echo "Branch $VERSION_BRANCH not found!"
            exit 1
          fi
